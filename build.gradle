buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.8.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

def projectUrl = properties['project.url']
def projectYear = properties['project.inceptionYear']
def projectScmUrl = properties['project.scm.url']
def projectScmConnection = properties['project.scm.connection']
def projectLicenseName = properties['project.license.name']
def projectLicenseUrl = properties['project.license.url']
def projectLicenseDistro = properties['project.license.distribution']
def projectIssueMgmtSystem = properties['project.issuemgmt.system']
def projectIssueMgmtUrl = properties['project.issuemgmt.url']

allprojects {
    apply plugin: 'jacoco'

    repositories {
        jcenter()
        mavenCentral()
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'com.bmuschko.nexus'

    group = properties['project.group']
    version = properties['project.version']
    sourceCompatibility = properties['project.compatibility']
    targetCompatibility = properties['project.compatibility']

    dependencies {

        //logging
        compile("org.slf4j:slf4j-api:1.7.22")

        testCompile("junit:junit:4.12")
        //for mocking
        testCompile("org.mockito:mockito-all:1.10.19")
        testRuntime("cglib:cglib-nodep:3.1")
        testRuntime("org.objenesis:objenesis:2.1")
    }

    compileJava.doFirst {
        println "source compatibility  " + sourceCompatibility
        println "target compatibility  " + targetCompatibility
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            xml.enabled true
            csv.enabled false
            html.destination "${buildDir}/reports/jacoco/test/"
        }
    }

    nexus {
        sign = false
        snapshotRepositoryUrl = 'http://localhost:8080/artifactory/libs-snapshot'
        repositoryUrl = 'http://localhost:8080/artifactory/libs-release'
    }

    checkstyle {
        configFile = new File("${rootDir}/config/checkstyle/checkstyle.xml")
        toolVersion = '6.7'
        ignoreFailures = false
    }

    task checkstyleMainHtml << {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file('../config/checkstyle/checkstyle.xsl'),
                out: new File("${buildDir}/reports/checkstyle", 'main.html'))
    }

    task checkstyleTestHtml << {
        ant.xslt(in: checkstyleTest.reports.xml.destination,
                style: file('../config/checkstyle/checkstyle.xsl'),
                out: new File("${buildDir}/reports/checkstyle", 'test.html'))
    }

    checkstyleMainHtml.dependsOn checkstyleMain
    checkstyleTestHtml.dependsOn checkstyleTest
    build.dependsOn jacocoTestReport, checkstyleMainHtml, checkstyleTestHtml
}

project('rulebook-core') {
    modifyPom {
        project {
            name 'RuleBook'
            description 'A simple and intuitive rules abstraction for Java'
            url "${projectUrl}"
            inceptionYear "${projectYear}"

            repositories {

            }

            scm {
                url "${projectScmUrl}"
                connection "${projectScmConnection}"
                developerConnection "${projectScmConnection}"
            }

            issueManagement {
                system "${projectIssueMgmtSystem}"
                url "${projectIssueMgmtUrl}"
            }

            licenses {
                license {
                    name "${projectLicenseName}"
                    url "${projectLicenseUrl}"
                    distribution "${projectLicenseDistro}"
                }
            }

            developers {
                developer {
                    id 'Clayton7510'
                    name 'Clayton Long'
                    email 'Clayton7510@gmail.com'
                }
            }

            contributors {
                contributor {
                    name 'Nicholas Lambert'
                }
                contributor {
                    name 'wheezymustafa'
                }
            }
        }
    }
}

project('rulebook-spring') {

    def springVersion = properties['spring.version']

    dependencies {
        compile project(":rulebook-core")

        //spring dependencies
        compile ("org.springframework:spring-context:${springVersion}")
        testCompile ("org.springframework:spring-test:${springVersion}")
    }

    modifyPom {
        project {
            name 'RuleBook Spring'
            description 'Spring support for RuleBook'
            url "${projectUrl}"
            inceptionYear "${projectYear}"

            scm {
                url "${projectScmUrl}"
                connection "${projectScmConnection}"
                developerConnection "${projectScmConnection}"
            }

            issueManagement {
                system "${projectIssueMgmtSystem}"
                url "${projectIssueMgmtUrl}"
            }

            licenses {
                license {
                    name "${projectLicenseName}"
                    url "${projectLicenseUrl}"
                    distribution "${projectLicenseDistro}"
                }
            }

            developers {
                developer {
                    id 'Clayton7510'
                    name 'Clayton Long'
                    email 'Clayton7510@gmail.com'
                }
            }
        }
    }
}
/*
project('rulebook-versioning') {

    dependencies {
        compile project(":rulebook-core")
    }

    modifyPom {
        project {
            name 'RuleBook Versioning'
            description 'Versioning support for RuleBook'
            url "${properties['project.url']}"
            inceptionYear "${properties['project.inceptionYear']}"

            scm {
                url "${properties['project.scm.url']}"
                connection "${properties['project.scm.connection']}"
                developerConnection "${properties['project.scm.developerConnection']}"
            }

            issueManagement {
                system "${properties['project.issueManagement.system']}"
                url "${properties['project.issueManagementUrl']}"
            }

            licenses {
                license {
                    name "${properties['project.license.name']}"
                    url "${properties['project.license.url']}"
                    distribution "${properties['project.license.distribution']}"
                }
            }

            developers {
                developer {
                    id 'Clayton7510'
                    name 'Clayton Long'
                    email 'Clayton7510@gmail.com'
                }
            }
        }
    }
}
*/

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        html.destination "${buildDir}/reports/jacoco/test/"
    }
}

task alljavadoc(type: Javadoc) {
    source subprojects.sourceSets.main.allSource
    classpath = files(subprojects.sourceSets.main.compileClasspath)
    destinationDir = file("${buildDir}/docs/javadoc")
}

